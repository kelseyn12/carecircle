rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Circles: only members can read, only owner can write
    match /circles/{circleId} {
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.members;
      allow create: if request.auth != null && 
        request.auth.uid == resource.data.ownerId;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.ownerId;
    }
    
    // Updates: only circle members can read, only members can create
    match /updates/{updateId} {
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/circles/$(resource.data.circleId)).data.members;
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/circles/$(request.resource.data.circleId)).data.members &&
        request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Invites: only circle owner can create, anyone with link can read
    match /invites/{inviteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/circles/$(request.resource.data.circleId)).data.ownerId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }
  }
}
