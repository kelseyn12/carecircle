rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read user profiles (for displaying names in comments, etc.)
      allow write: if request.auth != null && request.auth.uid == userId;
      // Allow updates to circlesMuted field for notification preferences
      allow update: if request.auth != null && request.auth.uid == userId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["circlesMuted"]);
    }
    
    // Circles: role-based permissions
    match /circles/{circleId} {
      allow read: if request.auth != null && (
        request.auth.uid in resource.data.members ||
        request.auth.uid == resource.data.ownerId ||
        (resource.data.ownerIds != null && request.auth.uid in resource.data.ownerIds)
      );
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth != null && (
        // Owners can update metadata and roles
        request.auth.uid in resource.data.ownerIds ||
        // Members can only update their own mute setting
        (request.auth.uid in resource.data.members &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(["members", "roles", "ownerIds", "updateAuthors"]))
      );
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.ownerIds;
    }
    
    // Updates: only updateAuthors can create, all members can read
    match /updates/{updateId} {
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/circles/$(resource.data.circleId)).data.members;
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/circles/$(request.resource.data.circleId)).data.updateAuthors &&
        request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Comments: any circle member can read and create
    match /comments/{commentId} {
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/circles/$(get(/databases/$(database)/documents/updates/$(resource.data.updateId)).data.circleId)).data.members;
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/circles/$(get(/databases/$(database)/documents/updates/$(request.resource.data.updateId)).data.circleId)).data.members &&
        request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Invites: only accessible via Cloud Functions
    match /invites/{inviteId} {
      allow read, write: if false; // Only accessible via Cloud Functions
    }
  }
}
